/* -*- Mode: C -*- */
/* Copyright (C) 2018-2024 by Henrik Theiling, License: GPLv3, see LICENSE file */
/* Automatically generated by mkmat. */

#ifndef CP_MAT_GEN_INL_H_
#define CP_MAT_GEN_INL_H_

#include <hob3lmat/mat_gen_tam.h>
#include <hob3lmat/mat_gen_ext.h>
#include <hob3lmat/algo.h>

static inline int cp_vec2_lex_cmp(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_vec3_lex_cmp(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_vec4_lex_cmp(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat2_lex_cmp(
    cp_mat2_t const* a,
    cp_mat2_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat2w_lex_cmp(
    cp_mat2w_t const* a,
    cp_mat2w_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat2i_lex_cmp(
    cp_mat2i_t const* a,
    cp_mat2i_t const* b)
{
    return cp_mat2_lex_cmp(&a->n, &b->n);
}

static inline int cp_mat2wi_lex_cmp(
    cp_mat2wi_t const* a,
    cp_mat2wi_t const* b)
{
    return cp_mat2w_lex_cmp(&a->n, &b->n);
}

static inline int cp_mat3_lex_cmp(
    cp_mat3_t const* a,
    cp_mat3_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat3w_lex_cmp(
    cp_mat3w_t const* a,
    cp_mat3w_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat3i_lex_cmp(
    cp_mat3i_t const* a,
    cp_mat3i_t const* b)
{
    return cp_mat3_lex_cmp(&a->n, &b->n);
}

static inline int cp_mat3wi_lex_cmp(
    cp_mat3wi_t const* a,
    cp_mat3wi_t const* b)
{
    return cp_mat3w_lex_cmp(&a->n, &b->n);
}

static inline int cp_mat4_lex_cmp(
    cp_mat4_t const* a,
    cp_mat4_t const* b)
{
    return cp_lex_cmp(a->v, b->v, cp_countof(a->v));
}

static inline int cp_mat4i_lex_cmp(
    cp_mat4i_t const* a,
    cp_mat4i_t const* b)
{
    return cp_mat4_lex_cmp(&a->n, &b->n);
}

static inline bool cp_vec2_eq(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    return cp_vec2_lex_cmp(a,b) == 0;
}

static inline bool cp_vec3_eq(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    return cp_vec3_lex_cmp(a,b) == 0;
}

static inline bool cp_vec4_eq(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    return cp_vec4_lex_cmp(a,b) == 0;
}

static inline bool cp_mat2_eq(
    cp_mat2_t const* a,
    cp_mat2_t const* b)
{
    return cp_mat2_lex_cmp(a,b) == 0;
}

static inline bool cp_mat2w_eq(
    cp_mat2w_t const* a,
    cp_mat2w_t const* b)
{
    return cp_mat2w_lex_cmp(a,b) == 0;
}

static inline bool cp_mat2i_eq(
    cp_mat2i_t const* a,
    cp_mat2i_t const* b)
{
    return cp_mat2i_lex_cmp(a,b) == 0;
}

static inline bool cp_mat2wi_eq(
    cp_mat2wi_t const* a,
    cp_mat2wi_t const* b)
{
    return cp_mat2wi_lex_cmp(a,b) == 0;
}

static inline bool cp_mat3_eq(
    cp_mat3_t const* a,
    cp_mat3_t const* b)
{
    return cp_mat3_lex_cmp(a,b) == 0;
}

static inline bool cp_mat3w_eq(
    cp_mat3w_t const* a,
    cp_mat3w_t const* b)
{
    return cp_mat3w_lex_cmp(a,b) == 0;
}

static inline bool cp_mat3i_eq(
    cp_mat3i_t const* a,
    cp_mat3i_t const* b)
{
    return cp_mat3i_lex_cmp(a,b) == 0;
}

static inline bool cp_mat3wi_eq(
    cp_mat3wi_t const* a,
    cp_mat3wi_t const* b)
{
    return cp_mat3wi_lex_cmp(a,b) == 0;
}

static inline bool cp_mat4_eq(
    cp_mat4_t const* a,
    cp_mat4_t const* b)
{
    return cp_mat4_lex_cmp(a,b) == 0;
}

static inline bool cp_mat4i_eq(
    cp_mat4i_t const* a,
    cp_mat4i_t const* b)
{
    return cp_mat4i_lex_cmp(a,b) == 0;
}

static inline cp_vec2_t CP_VEC2_REV_(
    cp_vec2_t const* a)
{
    cp_vec2_t r[1];
    cp_vec2_rev(r, a);
    return *r;
}

#define CP_VEC2_REV(a) (*(cp_vec2_t[1]){ CP_VEC2_REV_(a) })

static inline cp_vec3_t CP_VEC3_REV_(
    cp_vec3_t const* a)
{
    cp_vec3_t r[1];
    cp_vec3_rev(r, a);
    return *r;
}

#define CP_VEC3_REV(a) (*(cp_vec3_t[1]){ CP_VEC3_REV_(a) })

static inline cp_vec4_t CP_VEC4_REV_(
    cp_vec4_t const* a)
{
    cp_vec4_t r[1];
    cp_vec4_rev(r, a);
    return *r;
}

#define CP_VEC4_REV(a) (*(cp_vec4_t[1]){ CP_VEC4_REV_(a) })

static inline void cp_vec2_add(
    cp_vec2_t * r,
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    r->v[0] = a->v[0] + b->v[0];
    r->v[1] = a->v[1] + b->v[1];
}

static inline cp_vec2_t CP_VEC2_ADD_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_add(r, a, b);
    return *r;
}

#define CP_VEC2_ADD(a, b) (*(cp_vec2_t[1]){ CP_VEC2_ADD_(a, b) })

static inline void cp_vec3_add(
    cp_vec3_t * r,
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    r->v[0] = a->v[0] + b->v[0];
    r->v[1] = a->v[1] + b->v[1];
    r->v[2] = a->v[2] + b->v[2];
}

static inline cp_vec3_t CP_VEC3_ADD_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_add(r, a, b);
    return *r;
}

#define CP_VEC3_ADD(a, b) (*(cp_vec3_t[1]){ CP_VEC3_ADD_(a, b) })

static inline void cp_vec4_add(
    cp_vec4_t * r,
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    r->v[0] = a->v[0] + b->v[0];
    r->v[1] = a->v[1] + b->v[1];
    r->v[2] = a->v[2] + b->v[2];
    r->v[3] = a->v[3] + b->v[3];
}

static inline cp_vec4_t CP_VEC4_ADD_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_add(r, a, b);
    return *r;
}

#define CP_VEC4_ADD(a, b) (*(cp_vec4_t[1]){ CP_VEC4_ADD_(a, b) })

static inline void cp_vec2_neg(
    cp_vec2_t * r,
    cp_vec2_t const* a)
{
    r->v[0] = -a->v[0];
    r->v[1] = -a->v[1];
}

static inline cp_vec2_t CP_VEC2_NEG_(
    cp_vec2_t const* a)
{
    cp_vec2_t r[1];
    cp_vec2_neg(r, a);
    return *r;
}

#define CP_VEC2_NEG(a) (*(cp_vec2_t[1]){ CP_VEC2_NEG_(a) })

static inline void cp_vec3_neg(
    cp_vec3_t * r,
    cp_vec3_t const* a)
{
    r->v[0] = -a->v[0];
    r->v[1] = -a->v[1];
    r->v[2] = -a->v[2];
}

static inline cp_vec3_t CP_VEC3_NEG_(
    cp_vec3_t const* a)
{
    cp_vec3_t r[1];
    cp_vec3_neg(r, a);
    return *r;
}

#define CP_VEC3_NEG(a) (*(cp_vec3_t[1]){ CP_VEC3_NEG_(a) })

static inline void cp_vec4_neg(
    cp_vec4_t * r,
    cp_vec4_t const* a)
{
    r->v[0] = -a->v[0];
    r->v[1] = -a->v[1];
    r->v[2] = -a->v[2];
    r->v[3] = -a->v[3];
}

static inline cp_vec4_t CP_VEC4_NEG_(
    cp_vec4_t const* a)
{
    cp_vec4_t r[1];
    cp_vec4_neg(r, a);
    return *r;
}

#define CP_VEC4_NEG(a) (*(cp_vec4_t[1]){ CP_VEC4_NEG_(a) })

static inline void cp_vec2_sub(
    cp_vec2_t * r,
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    r->v[0] = a->v[0] - b->v[0];
    r->v[1] = a->v[1] - b->v[1];
}

static inline cp_vec2_t CP_VEC2_SUB_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_sub(r, a, b);
    return *r;
}

#define CP_VEC2_SUB(a, b) (*(cp_vec2_t[1]){ CP_VEC2_SUB_(a, b) })

static inline void cp_vec3_sub(
    cp_vec3_t * r,
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    r->v[0] = a->v[0] - b->v[0];
    r->v[1] = a->v[1] - b->v[1];
    r->v[2] = a->v[2] - b->v[2];
}

static inline cp_vec3_t CP_VEC3_SUB_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_sub(r, a, b);
    return *r;
}

#define CP_VEC3_SUB(a, b) (*(cp_vec3_t[1]){ CP_VEC3_SUB_(a, b) })

static inline void cp_vec4_sub(
    cp_vec4_t * r,
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    r->v[0] = a->v[0] - b->v[0];
    r->v[1] = a->v[1] - b->v[1];
    r->v[2] = a->v[2] - b->v[2];
    r->v[3] = a->v[3] - b->v[3];
}

static inline cp_vec4_t CP_VEC4_SUB_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_sub(r, a, b);
    return *r;
}

#define CP_VEC4_SUB(a, b) (*(cp_vec4_t[1]){ CP_VEC4_SUB_(a, b) })

static inline void cp_vec2_mulc(
    cp_vec2_t * r,
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    r->v[0] = a->v[0] * b->v[0];
    r->v[1] = a->v[1] * b->v[1];
}

static inline cp_vec2_t CP_VEC2_MULC_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_mulc(r, a, b);
    return *r;
}

#define CP_VEC2_MULC(a, b) (*(cp_vec2_t[1]){ CP_VEC2_MULC_(a, b) })

static inline void cp_vec3_mulc(
    cp_vec3_t * r,
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    r->v[0] = a->v[0] * b->v[0];
    r->v[1] = a->v[1] * b->v[1];
    r->v[2] = a->v[2] * b->v[2];
}

static inline cp_vec3_t CP_VEC3_MULC_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_mulc(r, a, b);
    return *r;
}

#define CP_VEC3_MULC(a, b) (*(cp_vec3_t[1]){ CP_VEC3_MULC_(a, b) })

static inline void cp_vec4_mulc(
    cp_vec4_t * r,
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    r->v[0] = a->v[0] * b->v[0];
    r->v[1] = a->v[1] * b->v[1];
    r->v[2] = a->v[2] * b->v[2];
    r->v[3] = a->v[3] * b->v[3];
}

static inline cp_vec4_t CP_VEC4_MULC_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_mulc(r, a, b);
    return *r;
}

#define CP_VEC4_MULC(a, b) (*(cp_vec4_t[1]){ CP_VEC4_MULC_(a, b) })

static inline cp_vec2_t CP_VEC2_DIVC_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_divc(r, a, b);
    return *r;
}

#define CP_VEC2_DIVC(a, b) (*(cp_vec2_t[1]){ CP_VEC2_DIVC_(a, b) })

static inline cp_vec3_t CP_VEC3_DIVC_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_divc(r, a, b);
    return *r;
}

#define CP_VEC3_DIVC(a, b) (*(cp_vec3_t[1]){ CP_VEC3_DIVC_(a, b) })

static inline cp_vec4_t CP_VEC4_DIVC_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_divc(r, a, b);
    return *r;
}

#define CP_VEC4_DIVC(a, b) (*(cp_vec4_t[1]){ CP_VEC4_DIVC_(a, b) })

static inline void cp_vec2_mul(
    cp_vec2_t * r,
    cp_vec2_t const* a,
    double b)
{
    r->v[0] = a->v[0] * b;
    r->v[1] = a->v[1] * b;
}

static inline cp_vec2_t CP_VEC2_MUL_(
    cp_vec2_t const* a,
    double b)
{
    cp_vec2_t r[1];
    cp_vec2_mul(r, a, b);
    return *r;
}

#define CP_VEC2_MUL(a, b) (*(cp_vec2_t[1]){ CP_VEC2_MUL_(a, b) })

static inline void cp_vec3_mul(
    cp_vec3_t * r,
    cp_vec3_t const* a,
    double b)
{
    r->v[0] = a->v[0] * b;
    r->v[1] = a->v[1] * b;
    r->v[2] = a->v[2] * b;
}

static inline cp_vec3_t CP_VEC3_MUL_(
    cp_vec3_t const* a,
    double b)
{
    cp_vec3_t r[1];
    cp_vec3_mul(r, a, b);
    return *r;
}

#define CP_VEC3_MUL(a, b) (*(cp_vec3_t[1]){ CP_VEC3_MUL_(a, b) })

static inline void cp_vec4_mul(
    cp_vec4_t * r,
    cp_vec4_t const* a,
    double b)
{
    r->v[0] = a->v[0] * b;
    r->v[1] = a->v[1] * b;
    r->v[2] = a->v[2] * b;
    r->v[3] = a->v[3] * b;
}

static inline cp_vec4_t CP_VEC4_MUL_(
    cp_vec4_t const* a,
    double b)
{
    cp_vec4_t r[1];
    cp_vec4_mul(r, a, b);
    return *r;
}

#define CP_VEC4_MUL(a, b) (*(cp_vec4_t[1]){ CP_VEC4_MUL_(a, b) })

static inline cp_vec2_t CP_VEC2_DIV_(
    cp_vec2_t const* a,
    double b)
{
    cp_vec2_t r[1];
    cp_vec2_div(r, a, b);
    return *r;
}

#define CP_VEC2_DIV(a, b) (*(cp_vec2_t[1]){ CP_VEC2_DIV_(a, b) })

static inline cp_vec3_t CP_VEC3_DIV_(
    cp_vec3_t const* a,
    double b)
{
    cp_vec3_t r[1];
    cp_vec3_div(r, a, b);
    return *r;
}

#define CP_VEC3_DIV(a, b) (*(cp_vec3_t[1]){ CP_VEC3_DIV_(a, b) })

static inline cp_vec4_t CP_VEC4_DIV_(
    cp_vec4_t const* a,
    double b)
{
    cp_vec4_t r[1];
    cp_vec4_div(r, a, b);
    return *r;
}

#define CP_VEC4_DIV(a, b) (*(cp_vec4_t[1]){ CP_VEC4_DIV_(a, b) })

static inline double cp_vec2_dot(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    return
        (a->v[0] * b->v[0]) +
        (a->v[1] * b->v[1]);
}

static inline double cp_vec3_dot(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    return
        (a->v[0] * b->v[0]) +
        (a->v[1] * b->v[1]) +
        (a->v[2] * b->v[2]);
}

static inline double cp_vec4_dot(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    return
        (a->v[0] * b->v[0]) +
        (a->v[1] * b->v[1]) +
        (a->v[2] * b->v[2]) +
        (a->v[3] * b->v[3]);
}

static inline cp_vec2_t CP_VEC2_MIN_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_min(r, a, b);
    return *r;
}

#define CP_VEC2_MIN(a, b) (*(cp_vec2_t[1]){ CP_VEC2_MIN_(a, b) })

static inline cp_vec3_t CP_VEC3_MIN_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_min(r, a, b);
    return *r;
}

#define CP_VEC3_MIN(a, b) (*(cp_vec3_t[1]){ CP_VEC3_MIN_(a, b) })

static inline cp_vec4_t CP_VEC4_MIN_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_min(r, a, b);
    return *r;
}

#define CP_VEC4_MIN(a, b) (*(cp_vec4_t[1]){ CP_VEC4_MIN_(a, b) })

static inline cp_vec2_t CP_VEC2_MAX_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_max(r, a, b);
    return *r;
}

#define CP_VEC2_MAX(a, b) (*(cp_vec2_t[1]){ CP_VEC2_MAX_(a, b) })

static inline cp_vec3_t CP_VEC3_MAX_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_max(r, a, b);
    return *r;
}

#define CP_VEC3_MAX(a, b) (*(cp_vec3_t[1]){ CP_VEC3_MAX_(a, b) })

static inline cp_vec4_t CP_VEC4_MAX_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_max(r, a, b);
    return *r;
}

#define CP_VEC4_MAX(a, b) (*(cp_vec4_t[1]){ CP_VEC4_MAX_(a, b) })

static inline cp_vec2_minmax_t CP_VEC2_MINMAX_(
    cp_vec2_t const* a)
{
    cp_vec2_minmax_t r[1];
    cp_vec2_minmax(r, a);
    return *r;
}

#define CP_VEC2_MINMAX(a) (*(cp_vec2_minmax_t[1]){ CP_VEC2_MINMAX_(a) })

static inline cp_vec3_minmax_t CP_VEC3_MINMAX_(
    cp_vec3_t const* a)
{
    cp_vec3_minmax_t r[1];
    cp_vec3_minmax(r, a);
    return *r;
}

#define CP_VEC3_MINMAX(a) (*(cp_vec3_minmax_t[1]){ CP_VEC3_MINMAX_(a) })

static inline cp_vec4_minmax_t CP_VEC4_MINMAX_(
    cp_vec4_t const* a)
{
    cp_vec4_minmax_t r[1];
    cp_vec4_minmax(r, a);
    return *r;
}

#define CP_VEC4_MINMAX(a) (*(cp_vec4_minmax_t[1]){ CP_VEC4_MINMAX_(a) })

static inline cp_vec2_minmax_t CP_VEC2_MINMAX_OR_(
    cp_vec2_minmax_t const * a,
    cp_vec2_minmax_t const * b)
{
    cp_vec2_minmax_t r[1];
    cp_vec2_minmax_or(r, a, b);
    return *r;
}

#define CP_VEC2_MINMAX_OR(a, b) (*(cp_vec2_minmax_t[1]){ CP_VEC2_MINMAX_OR_(a, b) })

static inline cp_vec3_minmax_t CP_VEC3_MINMAX_OR_(
    cp_vec3_minmax_t const * a,
    cp_vec3_minmax_t const * b)
{
    cp_vec3_minmax_t r[1];
    cp_vec3_minmax_or(r, a, b);
    return *r;
}

#define CP_VEC3_MINMAX_OR(a, b) (*(cp_vec3_minmax_t[1]){ CP_VEC3_MINMAX_OR_(a, b) })

static inline cp_vec4_minmax_t CP_VEC4_MINMAX_OR_(
    cp_vec4_minmax_t const * a,
    cp_vec4_minmax_t const * b)
{
    cp_vec4_minmax_t r[1];
    cp_vec4_minmax_or(r, a, b);
    return *r;
}

#define CP_VEC4_MINMAX_OR(a, b) (*(cp_vec4_minmax_t[1]){ CP_VEC4_MINMAX_OR_(a, b) })

static inline cp_vec2_minmax_t CP_VEC2_MINMAX_AND_(
    cp_vec2_minmax_t const * a,
    cp_vec2_minmax_t const * b)
{
    cp_vec2_minmax_t r[1];
    cp_vec2_minmax_and(r, a, b);
    return *r;
}

#define CP_VEC2_MINMAX_AND(a, b) (*(cp_vec2_minmax_t[1]){ CP_VEC2_MINMAX_AND_(a, b) })

static inline cp_vec3_minmax_t CP_VEC3_MINMAX_AND_(
    cp_vec3_minmax_t const * a,
    cp_vec3_minmax_t const * b)
{
    cp_vec3_minmax_t r[1];
    cp_vec3_minmax_and(r, a, b);
    return *r;
}

#define CP_VEC3_MINMAX_AND(a, b) (*(cp_vec3_minmax_t[1]){ CP_VEC3_MINMAX_AND_(a, b) })

static inline cp_vec4_minmax_t CP_VEC4_MINMAX_AND_(
    cp_vec4_minmax_t const * a,
    cp_vec4_minmax_t const * b)
{
    cp_vec4_minmax_t r[1];
    cp_vec4_minmax_and(r, a, b);
    return *r;
}

#define CP_VEC4_MINMAX_AND(a, b) (*(cp_vec4_minmax_t[1]){ CP_VEC4_MINMAX_AND_(a, b) })

static inline double cp_vec2_sqr_len(
    cp_vec2_t const* a)
{
    return cp_vec2_dot(a,a);
}

static inline double cp_vec3_sqr_len(
    cp_vec3_t const* a)
{
    return cp_vec3_dot(a,a);
}

static inline double cp_vec4_sqr_len(
    cp_vec4_t const* a)
{
    return cp_vec4_dot(a,a);
}

static inline double cp_vec2_len(
    cp_vec2_t const* a)
{
    return sqrt(cp_vec2_sqr_len(a));
}

static inline double cp_vec3_len(
    cp_vec3_t const* a)
{
    return sqrt(cp_vec3_sqr_len(a));
}

static inline double cp_vec4_len(
    cp_vec4_t const* a)
{
    return sqrt(cp_vec4_sqr_len(a));
}

static inline bool cp_vec2_has_len1(
    cp_vec2_t const* a)
{
    return cp_sqr_eq(cp_vec2_sqr_len(a), 1);
}

static inline bool cp_vec3_has_len1(
    cp_vec3_t const* a)
{
    return cp_sqr_eq(cp_vec3_sqr_len(a), 1);
}

static inline bool cp_vec4_has_len1(
    cp_vec4_t const* a)
{
    return cp_sqr_eq(cp_vec4_sqr_len(a), 1);
}

static inline bool cp_vec2_has_len0_or_1(
    cp_vec2_t const* a)
{
    return cp_vec2_has_len0(a) || cp_vec2_has_len1(a);
}

static inline bool cp_vec3_has_len0_or_1(
    cp_vec3_t const* a)
{
    return cp_vec3_has_len0(a) || cp_vec3_has_len1(a);
}

static inline bool cp_vec4_has_len0_or_1(
    cp_vec4_t const* a)
{
    return cp_vec4_has_len0(a) || cp_vec4_has_len1(a);
}

static inline double cp_vec2_sqr_dist(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t d[1];
    cp_vec2_sub(d, a, b);
    return cp_vec2_sqr_len(d);
}

static inline double cp_vec3_sqr_dist(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t d[1];
    cp_vec3_sub(d, a, b);
    return cp_vec3_sqr_len(d);
}

static inline double cp_vec4_sqr_dist(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t d[1];
    cp_vec4_sub(d, a, b);
    return cp_vec4_sqr_len(d);
}

static inline double cp_vec2_dist(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    return sqrt(cp_vec2_sqr_dist(a,b));
}

static inline double cp_vec3_dist(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    return sqrt(cp_vec3_sqr_dist(a,b));
}

static inline double cp_vec4_dist(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    return sqrt(cp_vec4_sqr_dist(a,b));
}

static inline cp_vec2_t CP_VEC2_LERP_(
    cp_vec2_t const* a,
    cp_vec2_t const* b,
    double c)
{
    cp_vec2_t r[1];
    cp_vec2_lerp(r, a, b, c);
    return *r;
}

#define CP_VEC2_LERP(a, b, c) (*(cp_vec2_t[1]){ CP_VEC2_LERP_(a, b, c) })

static inline cp_vec3_t CP_VEC3_LERP_(
    cp_vec3_t const* a,
    cp_vec3_t const* b,
    double c)
{
    cp_vec3_t r[1];
    cp_vec3_lerp(r, a, b, c);
    return *r;
}

#define CP_VEC3_LERP(a, b, c) (*(cp_vec3_t[1]){ CP_VEC3_LERP_(a, b, c) })

static inline cp_vec4_t CP_VEC4_LERP_(
    cp_vec4_t const* a,
    cp_vec4_t const* b,
    double c)
{
    cp_vec4_t r[1];
    cp_vec4_lerp(r, a, b, c);
    return *r;
}

#define CP_VEC4_LERP(a, b, c) (*(cp_vec4_t[1]){ CP_VEC4_LERP_(a, b, c) })

static inline void cp_vec2_dir(
    cp_vec2_t * r,
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_sub(r, a, b);
    cp_vec2_unit(r, r);
}

static inline cp_vec2_t CP_VEC2_DIR_(
    cp_vec2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_dir(r, a, b);
    return *r;
}

#define CP_VEC2_DIR(a, b) (*(cp_vec2_t[1]){ CP_VEC2_DIR_(a, b) })

static inline void cp_vec3_dir(
    cp_vec3_t * r,
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_sub(r, a, b);
    cp_vec3_unit(r, r);
}

static inline cp_vec3_t CP_VEC3_DIR_(
    cp_vec3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_dir(r, a, b);
    return *r;
}

#define CP_VEC3_DIR(a, b) (*(cp_vec3_t[1]){ CP_VEC3_DIR_(a, b) })

static inline void cp_vec4_dir(
    cp_vec4_t * r,
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_sub(r, a, b);
    cp_vec4_unit(r, r);
}

static inline cp_vec4_t CP_VEC4_DIR_(
    cp_vec4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_dir(r, a, b);
    return *r;
}

#define CP_VEC4_DIR(a, b) (*(cp_vec4_t[1]){ CP_VEC4_DIR_(a, b) })

static inline cp_vec2_t CP_VEC2_XFORM_(
    cp_mat2_t const* a,
    cp_vec2_t const* b)
{
    cp_vec2_t r[1];
    cp_vec2_xform(r, a, b);
    return *r;
}

#define CP_VEC2_XFORM(a, b) (*(cp_vec2_t[1]){ CP_VEC2_XFORM_(a, b) })

static inline cp_vec3_t CP_VEC3_XFORM_(
    cp_mat3_t const* a,
    cp_vec3_t const* b)
{
    cp_vec3_t r[1];
    cp_vec3_xform(r, a, b);
    return *r;
}

#define CP_VEC3_XFORM(a, b) (*(cp_vec3_t[1]){ CP_VEC3_XFORM_(a, b) })

static inline cp_vec4_t CP_VEC4_XFORM_(
    cp_mat4_t const* a,
    cp_vec4_t const* b)
{
    cp_vec4_t r[1];
    cp_vec4_xform(r, a, b);
    return *r;
}

#define CP_VEC4_XFORM(a, b) (*(cp_vec4_t[1]){ CP_VEC4_XFORM_(a, b) })

static inline void cp_mat2_scale(
    cp_mat2_t * r,
    double x,
    double y)
{
    CP_ZERO(r);
    r->m[0][0] = x;
    r->m[1][1] = y;
}

static inline cp_mat2_t CP_MAT2_SCALE_(
    double x,
    double y)
{
    cp_mat2_t r[1];
    cp_mat2_scale(r, x, y);
    return *r;
}

#define CP_MAT2_SCALE(x, y) (*(cp_mat2_t[1]){ CP_MAT2_SCALE_(x, y) })

static inline void cp_mat2w_scale(
    cp_mat2w_t * r,
    double x,
    double y)
{
    CP_ZERO(r);
    r->b.m[0][0] = x;
    r->b.m[1][1] = y;
}

static inline cp_mat2w_t CP_MAT2W_SCALE_(
    double x,
    double y)
{
    cp_mat2w_t r[1];
    cp_mat2w_scale(r, x, y);
    return *r;
}

#define CP_MAT2W_SCALE(x, y) (*(cp_mat2w_t[1]){ CP_MAT2W_SCALE_(x, y) })

static inline cp_mat2i_t CP_MAT2I_SCALE_(
    double x,
    double y)
{
    cp_mat2i_t r[1];
    cp_mat2i_scale(r, x, y);
    return *r;
}

#define CP_MAT2I_SCALE(x, y) (*(cp_mat2i_t[1]){ CP_MAT2I_SCALE_(x, y) })

static inline cp_mat2wi_t CP_MAT2WI_SCALE_(
    double x,
    double y)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_scale(r, x, y);
    return *r;
}

#define CP_MAT2WI_SCALE(x, y) (*(cp_mat2wi_t[1]){ CP_MAT2WI_SCALE_(x, y) })

static inline void cp_mat3_scale(
    cp_mat3_t * r,
    double x,
    double y,
    double z)
{
    CP_ZERO(r);
    r->m[0][0] = x;
    r->m[1][1] = y;
    r->m[2][2] = z;
}

static inline cp_mat3_t CP_MAT3_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat3_t r[1];
    cp_mat3_scale(r, x, y, z);
    return *r;
}

#define CP_MAT3_SCALE(x, y, z) (*(cp_mat3_t[1]){ CP_MAT3_SCALE_(x, y, z) })

static inline void cp_mat3w_scale(
    cp_mat3w_t * r,
    double x,
    double y,
    double z)
{
    CP_ZERO(r);
    r->b.m[0][0] = x;
    r->b.m[1][1] = y;
    r->b.m[2][2] = z;
}

static inline cp_mat3w_t CP_MAT3W_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat3w_t r[1];
    cp_mat3w_scale(r, x, y, z);
    return *r;
}

#define CP_MAT3W_SCALE(x, y, z) (*(cp_mat3w_t[1]){ CP_MAT3W_SCALE_(x, y, z) })

static inline cp_mat3i_t CP_MAT3I_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat3i_t r[1];
    cp_mat3i_scale(r, x, y, z);
    return *r;
}

#define CP_MAT3I_SCALE(x, y, z) (*(cp_mat3i_t[1]){ CP_MAT3I_SCALE_(x, y, z) })

static inline cp_mat3wi_t CP_MAT3WI_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_scale(r, x, y, z);
    return *r;
}

#define CP_MAT3WI_SCALE(x, y, z) (*(cp_mat3wi_t[1]){ CP_MAT3WI_SCALE_(x, y, z) })

static inline void cp_mat4_scale(
    cp_mat4_t * r,
    double x,
    double y,
    double z)
{
    CP_ZERO(r);
    r->m[0][0] = x;
    r->m[1][1] = y;
    r->m[2][2] = z;
    r->m[3][3] = 1;
}

static inline cp_mat4_t CP_MAT4_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat4_t r[1];
    cp_mat4_scale(r, x, y, z);
    return *r;
}

#define CP_MAT4_SCALE(x, y, z) (*(cp_mat4_t[1]){ CP_MAT4_SCALE_(x, y, z) })

static inline cp_mat4i_t CP_MAT4I_SCALE_(
    double x,
    double y,
    double z)
{
    cp_mat4i_t r[1];
    cp_mat4i_scale(r, x, y, z);
    return *r;
}

#define CP_MAT4I_SCALE(x, y, z) (*(cp_mat4i_t[1]){ CP_MAT4I_SCALE_(x, y, z) })

static inline void cp_mat2_scale1(
    cp_mat2_t * r,
    double a)
{
    cp_mat2_scale(r, a, a);
}

static inline cp_mat2_t CP_MAT2_SCALE1_(
    double a)
{
    cp_mat2_t r[1];
    cp_mat2_scale1(r, a);
    return *r;
}

#define CP_MAT2_SCALE1(a) (*(cp_mat2_t[1]){ CP_MAT2_SCALE1_(a) })

static inline void cp_mat2w_scale1(
    cp_mat2w_t * r,
    double a)
{
    cp_mat2w_scale(r, a, a);
}

static inline cp_mat2w_t CP_MAT2W_SCALE1_(
    double a)
{
    cp_mat2w_t r[1];
    cp_mat2w_scale1(r, a);
    return *r;
}

#define CP_MAT2W_SCALE1(a) (*(cp_mat2w_t[1]){ CP_MAT2W_SCALE1_(a) })

static inline void cp_mat2i_scale1(
    cp_mat2i_t * r,
    double a)
{
    cp_mat2i_scale(r, a, a);
}

static inline cp_mat2i_t CP_MAT2I_SCALE1_(
    double a)
{
    cp_mat2i_t r[1];
    cp_mat2i_scale1(r, a);
    return *r;
}

#define CP_MAT2I_SCALE1(a) (*(cp_mat2i_t[1]){ CP_MAT2I_SCALE1_(a) })

static inline void cp_mat2wi_scale1(
    cp_mat2wi_t * r,
    double a)
{
    cp_mat2wi_scale(r, a, a);
}

static inline cp_mat2wi_t CP_MAT2WI_SCALE1_(
    double a)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_scale1(r, a);
    return *r;
}

#define CP_MAT2WI_SCALE1(a) (*(cp_mat2wi_t[1]){ CP_MAT2WI_SCALE1_(a) })

static inline void cp_mat3_scale1(
    cp_mat3_t * r,
    double a)
{
    cp_mat3_scale(r, a, a, a);
}

static inline cp_mat3_t CP_MAT3_SCALE1_(
    double a)
{
    cp_mat3_t r[1];
    cp_mat3_scale1(r, a);
    return *r;
}

#define CP_MAT3_SCALE1(a) (*(cp_mat3_t[1]){ CP_MAT3_SCALE1_(a) })

static inline void cp_mat3w_scale1(
    cp_mat3w_t * r,
    double a)
{
    cp_mat3w_scale(r, a, a, a);
}

static inline cp_mat3w_t CP_MAT3W_SCALE1_(
    double a)
{
    cp_mat3w_t r[1];
    cp_mat3w_scale1(r, a);
    return *r;
}

#define CP_MAT3W_SCALE1(a) (*(cp_mat3w_t[1]){ CP_MAT3W_SCALE1_(a) })

static inline void cp_mat3i_scale1(
    cp_mat3i_t * r,
    double a)
{
    cp_mat3i_scale(r, a, a, a);
}

static inline cp_mat3i_t CP_MAT3I_SCALE1_(
    double a)
{
    cp_mat3i_t r[1];
    cp_mat3i_scale1(r, a);
    return *r;
}

#define CP_MAT3I_SCALE1(a) (*(cp_mat3i_t[1]){ CP_MAT3I_SCALE1_(a) })

static inline void cp_mat3wi_scale1(
    cp_mat3wi_t * r,
    double a)
{
    cp_mat3wi_scale(r, a, a, a);
}

static inline cp_mat3wi_t CP_MAT3WI_SCALE1_(
    double a)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_scale1(r, a);
    return *r;
}

#define CP_MAT3WI_SCALE1(a) (*(cp_mat3wi_t[1]){ CP_MAT3WI_SCALE1_(a) })

static inline void cp_mat4_scale1(
    cp_mat4_t * r,
    double a)
{
    cp_mat4_scale(r, a, a, a);
}

static inline cp_mat4_t CP_MAT4_SCALE1_(
    double a)
{
    cp_mat4_t r[1];
    cp_mat4_scale1(r, a);
    return *r;
}

#define CP_MAT4_SCALE1(a) (*(cp_mat4_t[1]){ CP_MAT4_SCALE1_(a) })

static inline void cp_mat4i_scale1(
    cp_mat4i_t * r,
    double a)
{
    cp_mat4i_scale(r, a, a, a);
}

static inline cp_mat4i_t CP_MAT4I_SCALE1_(
    double a)
{
    cp_mat4i_t r[1];
    cp_mat4i_scale1(r, a);
    return *r;
}

#define CP_MAT4I_SCALE1(a) (*(cp_mat4i_t[1]){ CP_MAT4I_SCALE1_(a) })

static inline void cp_mat2_scale_v(
    cp_mat2_t * r,
    cp_vec2_t const* a)
{
    cp_mat2_scale(r, a->x, a->y);
}

static inline cp_mat2_t CP_MAT2_SCALE_V_(
    cp_vec2_t const* a)
{
    cp_mat2_t r[1];
    cp_mat2_scale_v(r, a);
    return *r;
}

#define CP_MAT2_SCALE_V(a) (*(cp_mat2_t[1]){ CP_MAT2_SCALE_V_(a) })

static inline void cp_mat2w_scale_v(
    cp_mat2w_t * r,
    cp_vec2_t const* a)
{
    cp_mat2w_scale(r, a->x, a->y);
}

static inline cp_mat2w_t CP_MAT2W_SCALE_V_(
    cp_vec2_t const* a)
{
    cp_mat2w_t r[1];
    cp_mat2w_scale_v(r, a);
    return *r;
}

#define CP_MAT2W_SCALE_V(a) (*(cp_mat2w_t[1]){ CP_MAT2W_SCALE_V_(a) })

static inline void cp_mat2i_scale_v(
    cp_mat2i_t * r,
    cp_vec2_t const* a)
{
    cp_mat2i_scale(r, a->x, a->y);
}

static inline cp_mat2i_t CP_MAT2I_SCALE_V_(
    cp_vec2_t const* a)
{
    cp_mat2i_t r[1];
    cp_mat2i_scale_v(r, a);
    return *r;
}

#define CP_MAT2I_SCALE_V(a) (*(cp_mat2i_t[1]){ CP_MAT2I_SCALE_V_(a) })

static inline void cp_mat2wi_scale_v(
    cp_mat2wi_t * r,
    cp_vec2_t const* a)
{
    cp_mat2wi_scale(r, a->x, a->y);
}

static inline cp_mat2wi_t CP_MAT2WI_SCALE_V_(
    cp_vec2_t const* a)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_scale_v(r, a);
    return *r;
}

#define CP_MAT2WI_SCALE_V(a) (*(cp_mat2wi_t[1]){ CP_MAT2WI_SCALE_V_(a) })

static inline void cp_mat3_scale_v(
    cp_mat3_t * r,
    cp_vec3_t const* a)
{
    cp_mat3_scale(r, a->x, a->y, a->z);
}

static inline cp_mat3_t CP_MAT3_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat3_t r[1];
    cp_mat3_scale_v(r, a);
    return *r;
}

#define CP_MAT3_SCALE_V(a) (*(cp_mat3_t[1]){ CP_MAT3_SCALE_V_(a) })

static inline void cp_mat3w_scale_v(
    cp_mat3w_t * r,
    cp_vec3_t const* a)
{
    cp_mat3w_scale(r, a->x, a->y, a->z);
}

static inline cp_mat3w_t CP_MAT3W_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat3w_t r[1];
    cp_mat3w_scale_v(r, a);
    return *r;
}

#define CP_MAT3W_SCALE_V(a) (*(cp_mat3w_t[1]){ CP_MAT3W_SCALE_V_(a) })

static inline void cp_mat3i_scale_v(
    cp_mat3i_t * r,
    cp_vec3_t const* a)
{
    cp_mat3i_scale(r, a->x, a->y, a->z);
}

static inline cp_mat3i_t CP_MAT3I_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat3i_t r[1];
    cp_mat3i_scale_v(r, a);
    return *r;
}

#define CP_MAT3I_SCALE_V(a) (*(cp_mat3i_t[1]){ CP_MAT3I_SCALE_V_(a) })

static inline void cp_mat3wi_scale_v(
    cp_mat3wi_t * r,
    cp_vec3_t const* a)
{
    cp_mat3wi_scale(r, a->x, a->y, a->z);
}

static inline cp_mat3wi_t CP_MAT3WI_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_scale_v(r, a);
    return *r;
}

#define CP_MAT3WI_SCALE_V(a) (*(cp_mat3wi_t[1]){ CP_MAT3WI_SCALE_V_(a) })

static inline void cp_mat4_scale_v(
    cp_mat4_t * r,
    cp_vec3_t const* a)
{
    cp_mat4_scale(r, a->x, a->y, a->z);
}

static inline cp_mat4_t CP_MAT4_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat4_t r[1];
    cp_mat4_scale_v(r, a);
    return *r;
}

#define CP_MAT4_SCALE_V(a) (*(cp_mat4_t[1]){ CP_MAT4_SCALE_V_(a) })

static inline void cp_mat4i_scale_v(
    cp_mat4i_t * r,
    cp_vec3_t const* a)
{
    cp_mat4i_scale(r, a->x, a->y, a->z);
}

static inline cp_mat4i_t CP_MAT4I_SCALE_V_(
    cp_vec3_t const* a)
{
    cp_mat4i_t r[1];
    cp_mat4i_scale_v(r, a);
    return *r;
}

#define CP_MAT4I_SCALE_V(a) (*(cp_mat4i_t[1]){ CP_MAT4I_SCALE_V_(a) })

static inline void cp_mat2_unit(
    cp_mat2_t * r)
{
    cp_mat2_scale1(r, 1);
}

static inline cp_mat2_t CP_MAT2_UNIT_(void)
{
    cp_mat2_t r[1];
    cp_mat2_unit(r);
    return *r;
}

#define CP_MAT2_UNIT() (*(cp_mat2_t[1]){ CP_MAT2_UNIT_() })

static inline void cp_mat2w_unit(
    cp_mat2w_t * r)
{
    cp_mat2w_scale1(r, 1);
}

static inline cp_mat2w_t CP_MAT2W_UNIT_(void)
{
    cp_mat2w_t r[1];
    cp_mat2w_unit(r);
    return *r;
}

#define CP_MAT2W_UNIT() (*(cp_mat2w_t[1]){ CP_MAT2W_UNIT_() })

static inline void cp_mat2i_unit(
    cp_mat2i_t * r)
{
    cp_mat2i_scale1(r, 1);
}

static inline cp_mat2i_t CP_MAT2I_UNIT_(void)
{
    cp_mat2i_t r[1];
    cp_mat2i_unit(r);
    return *r;
}

#define CP_MAT2I_UNIT() (*(cp_mat2i_t[1]){ CP_MAT2I_UNIT_() })

static inline void cp_mat2wi_unit(
    cp_mat2wi_t * r)
{
    cp_mat2wi_scale1(r, 1);
}

static inline cp_mat2wi_t CP_MAT2WI_UNIT_(void)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_unit(r);
    return *r;
}

#define CP_MAT2WI_UNIT() (*(cp_mat2wi_t[1]){ CP_MAT2WI_UNIT_() })

static inline void cp_mat3_unit(
    cp_mat3_t * r)
{
    cp_mat3_scale1(r, 1);
}

static inline cp_mat3_t CP_MAT3_UNIT_(void)
{
    cp_mat3_t r[1];
    cp_mat3_unit(r);
    return *r;
}

#define CP_MAT3_UNIT() (*(cp_mat3_t[1]){ CP_MAT3_UNIT_() })

static inline void cp_mat3w_unit(
    cp_mat3w_t * r)
{
    cp_mat3w_scale1(r, 1);
}

static inline cp_mat3w_t CP_MAT3W_UNIT_(void)
{
    cp_mat3w_t r[1];
    cp_mat3w_unit(r);
    return *r;
}

#define CP_MAT3W_UNIT() (*(cp_mat3w_t[1]){ CP_MAT3W_UNIT_() })

static inline void cp_mat3i_unit(
    cp_mat3i_t * r)
{
    cp_mat3i_scale1(r, 1);
}

static inline cp_mat3i_t CP_MAT3I_UNIT_(void)
{
    cp_mat3i_t r[1];
    cp_mat3i_unit(r);
    return *r;
}

#define CP_MAT3I_UNIT() (*(cp_mat3i_t[1]){ CP_MAT3I_UNIT_() })

static inline void cp_mat3wi_unit(
    cp_mat3wi_t * r)
{
    cp_mat3wi_scale1(r, 1);
}

static inline cp_mat3wi_t CP_MAT3WI_UNIT_(void)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_unit(r);
    return *r;
}

#define CP_MAT3WI_UNIT() (*(cp_mat3wi_t[1]){ CP_MAT3WI_UNIT_() })

static inline void cp_mat4_unit(
    cp_mat4_t * r)
{
    cp_mat4_scale1(r, 1);
}

static inline cp_mat4_t CP_MAT4_UNIT_(void)
{
    cp_mat4_t r[1];
    cp_mat4_unit(r);
    return *r;
}

#define CP_MAT4_UNIT() (*(cp_mat4_t[1]){ CP_MAT4_UNIT_() })

static inline void cp_mat4i_unit(
    cp_mat4i_t * r)
{
    cp_mat4i_scale1(r, 1);
}

static inline cp_mat4i_t CP_MAT4I_UNIT_(void)
{
    cp_mat4i_t r[1];
    cp_mat4i_unit(r);
    return *r;
}

#define CP_MAT4I_UNIT() (*(cp_mat4i_t[1]){ CP_MAT4I_UNIT_() })

static inline cp_mat2_t CP_MAT2_TRANS_(
    cp_mat2_t const* a)
{
    cp_mat2_t r[1];
    cp_mat2_trans(r, a);
    return *r;
}

#define CP_MAT2_TRANS(a) (*(cp_mat2_t[1]){ CP_MAT2_TRANS_(a) })

static inline cp_mat2i_t CP_MAT2I_TRANS_(
    cp_mat2i_t const* a)
{
    cp_mat2i_t r[1];
    cp_mat2i_trans(r, a);
    return *r;
}

#define CP_MAT2I_TRANS(a) (*(cp_mat2i_t[1]){ CP_MAT2I_TRANS_(a) })

static inline cp_mat3_t CP_MAT3_TRANS_(
    cp_mat3_t const* a)
{
    cp_mat3_t r[1];
    cp_mat3_trans(r, a);
    return *r;
}

#define CP_MAT3_TRANS(a) (*(cp_mat3_t[1]){ CP_MAT3_TRANS_(a) })

static inline cp_mat3i_t CP_MAT3I_TRANS_(
    cp_mat3i_t const* a)
{
    cp_mat3i_t r[1];
    cp_mat3i_trans(r, a);
    return *r;
}

#define CP_MAT3I_TRANS(a) (*(cp_mat3i_t[1]){ CP_MAT3I_TRANS_(a) })

static inline cp_mat4_t CP_MAT4_TRANS_(
    cp_mat4_t const* a)
{
    cp_mat4_t r[1];
    cp_mat4_trans(r, a);
    return *r;
}

#define CP_MAT4_TRANS(a) (*(cp_mat4_t[1]){ CP_MAT4_TRANS_(a) })

static inline cp_mat4i_t CP_MAT4I_TRANS_(
    cp_mat4i_t const* a)
{
    cp_mat4i_t r[1];
    cp_mat4i_trans(r, a);
    return *r;
}

#define CP_MAT4I_TRANS(a) (*(cp_mat4i_t[1]){ CP_MAT4I_TRANS_(a) })

static inline void cp_mat3_rot_unit(
    cp_mat3_t * r,
    cp_vec3_t const* u,
    cp_vec2_t const* sc)
{
    cp_dim3_rot_unit(&r->row[0], &r->row[1], &r->row[2], u, sc);
}

static inline cp_mat3_t CP_MAT3_ROT_UNIT_(
    cp_vec3_t const* u,
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_unit(r, u, sc);
    return *r;
}

#define CP_MAT3_ROT_UNIT(u, sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_UNIT_(u, sc) })

static inline void cp_mat3w_rot_unit(
    cp_mat3w_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_unit(&r->b, v, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_UNIT_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_unit(r, v, sc);
    return *r;
}

#define CP_MAT3W_ROT_UNIT(v, sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_UNIT_(v, sc) })

static inline cp_mat3i_t CP_MAT3I_ROT_UNIT_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_unit(r, v, sc);
    return *r;
}

#define CP_MAT3I_ROT_UNIT(v, sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_UNIT_(v, sc) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_UNIT_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_unit(r, v, sc);
    return *r;
}

#define CP_MAT3WI_ROT_UNIT(v, sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_UNIT_(v, sc) })

static inline void cp_mat4_rot_unit(
    cp_mat4_t * r,
    cp_vec3_t const* u,
    cp_vec2_t const* sc)
{
    CP_ZERO(r);
    r->m[3][3] = 1;
    cp_dim3_rot_unit(&r->row[0].b, &r->row[1].b, &r->row[2].b, u, sc);
}

static inline cp_mat4_t CP_MAT4_ROT_UNIT_(
    cp_vec3_t const* u,
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_unit(r, u, sc);
    return *r;
}

#define CP_MAT4_ROT_UNIT(u, sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_UNIT_(u, sc) })

static inline cp_mat4i_t CP_MAT4I_ROT_UNIT_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_unit(r, v, sc);
    return *r;
}

#define CP_MAT4I_ROT_UNIT(v, sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_UNIT_(v, sc) })

static inline void cp_mat3_rot_v(
    cp_mat3_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3_rot_unit(r, &u, sc);
}

static inline cp_mat3_t CP_MAT3_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT3_ROT_V(v, sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_V_(v, sc) })

static inline void cp_mat3w_rot_v(
    cp_mat3w_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3w_rot_unit(r, &u, sc);
}

static inline cp_mat3w_t CP_MAT3W_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT3W_ROT_V(v, sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_V_(v, sc) })

static inline void cp_mat3i_rot_v(
    cp_mat3i_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3i_rot_unit(r, &u, sc);
}

static inline cp_mat3i_t CP_MAT3I_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT3I_ROT_V(v, sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_V_(v, sc) })

static inline void cp_mat3wi_rot_v(
    cp_mat3wi_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3wi_rot_unit(r, &u, sc);
}

static inline cp_mat3wi_t CP_MAT3WI_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT3WI_ROT_V(v, sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_V_(v, sc) })

static inline void cp_mat4_rot_v(
    cp_mat4_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat4_rot_unit(r, &u, sc);
}

static inline cp_mat4_t CP_MAT4_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT4_ROT_V(v, sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_V_(v, sc) })

static inline void cp_mat4i_rot_v(
    cp_mat4i_t * r,
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat4i_rot_unit(r, &u, sc);
}

static inline cp_mat4i_t CP_MAT4I_ROT_V_(
    cp_vec3_t const* v,
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_v(r, v, sc);
    return *r;
}

#define CP_MAT4I_ROT_V(v, sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_V_(v, sc) })

static inline void cp_mat3_rot_unit_into_z(
    cp_mat3_t * r,
    cp_vec3_t const* u)
{
    cp_dim3_rot_unit_into_z(&r->row[0], &r->row[1], &r->row[2], u);
}

static inline cp_mat3_t CP_MAT3_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* u)
{
    cp_mat3_t r[1];
    cp_mat3_rot_unit_into_z(r, u);
    return *r;
}

#define CP_MAT3_ROT_UNIT_INTO_Z(u) (*(cp_mat3_t[1]){ CP_MAT3_ROT_UNIT_INTO_Z_(u) })

static inline void cp_mat3w_rot_unit_into_z(
    cp_mat3w_t * r,
    cp_vec3_t const* v)
{
    cp_mat3_rot_unit_into_z(&r->b, v);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* v)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_unit_into_z(r, v);
    return *r;
}

#define CP_MAT3W_ROT_UNIT_INTO_Z(v) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_UNIT_INTO_Z_(v) })

static inline cp_mat3i_t CP_MAT3I_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* v)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_unit_into_z(r, v);
    return *r;
}

#define CP_MAT3I_ROT_UNIT_INTO_Z(v) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_UNIT_INTO_Z_(v) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* v)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_unit_into_z(r, v);
    return *r;
}

#define CP_MAT3WI_ROT_UNIT_INTO_Z(v) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_UNIT_INTO_Z_(v) })

static inline void cp_mat4_rot_unit_into_z(
    cp_mat4_t * r,
    cp_vec3_t const* u)
{
    CP_ZERO(r);
    r->m[3][3] = 1;
    cp_dim3_rot_unit_into_z(&r->row[0].b, &r->row[1].b, &r->row[2].b, u);
}

static inline cp_mat4_t CP_MAT4_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* u)
{
    cp_mat4_t r[1];
    cp_mat4_rot_unit_into_z(r, u);
    return *r;
}

#define CP_MAT4_ROT_UNIT_INTO_Z(u) (*(cp_mat4_t[1]){ CP_MAT4_ROT_UNIT_INTO_Z_(u) })

static inline cp_mat4i_t CP_MAT4I_ROT_UNIT_INTO_Z_(
    cp_vec3_t const* v)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_unit_into_z(r, v);
    return *r;
}

#define CP_MAT4I_ROT_UNIT_INTO_Z(v) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_UNIT_INTO_Z_(v) })

static inline cp_mat2_t CP_MAT2_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat2_t r[1];
    cp_mat2_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT2_ROT_IJ(i, j, sc) (*(cp_mat2_t[1]){ CP_MAT2_ROT_IJ_(i, j, sc) })

static inline void cp_mat2w_rot_ij(
    cp_mat2w_t * r,
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat2_rot_ij(&r->b, i, j, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat2w_t CP_MAT2W_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat2w_t r[1];
    cp_mat2w_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT2W_ROT_IJ(i, j, sc) (*(cp_mat2w_t[1]){ CP_MAT2W_ROT_IJ_(i, j, sc) })

static inline cp_mat2i_t CP_MAT2I_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat2i_t r[1];
    cp_mat2i_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT2I_ROT_IJ(i, j, sc) (*(cp_mat2i_t[1]){ CP_MAT2I_ROT_IJ_(i, j, sc) })

static inline cp_mat2wi_t CP_MAT2WI_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT2WI_ROT_IJ(i, j, sc) (*(cp_mat2wi_t[1]){ CP_MAT2WI_ROT_IJ_(i, j, sc) })

static inline cp_mat3_t CP_MAT3_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT3_ROT_IJ(i, j, sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_IJ_(i, j, sc) })

static inline void cp_mat3w_rot_ij(
    cp_mat3w_t * r,
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_ij(&r->b, i, j, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT3W_ROT_IJ(i, j, sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_IJ_(i, j, sc) })

static inline cp_mat3i_t CP_MAT3I_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT3I_ROT_IJ(i, j, sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_IJ_(i, j, sc) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT3WI_ROT_IJ(i, j, sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_IJ_(i, j, sc) })

static inline cp_mat4_t CP_MAT4_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT4_ROT_IJ(i, j, sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_IJ_(i, j, sc) })

static inline cp_mat4i_t CP_MAT4I_ROT_IJ_(
    size_t i,
    size_t j,
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_ij(r, i, j, sc);
    return *r;
}

#define CP_MAT4I_ROT_IJ(i, j, sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_IJ_(i, j, sc) })

static inline void cp_mat3_rot_x(
    cp_mat3_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_ij(r, 1, 2, sc);
}

static inline cp_mat3_t CP_MAT3_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_x(r, sc);
    return *r;
}

#define CP_MAT3_ROT_X(sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_X_(sc) })

static inline void cp_mat3w_rot_x(
    cp_mat3w_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_x(&r->b, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_x(r, sc);
    return *r;
}

#define CP_MAT3W_ROT_X(sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_X_(sc) })

static inline cp_mat3i_t CP_MAT3I_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_x(r, sc);
    return *r;
}

#define CP_MAT3I_ROT_X(sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_X_(sc) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_x(r, sc);
    return *r;
}

#define CP_MAT3WI_ROT_X(sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_X_(sc) })

static inline void cp_mat4_rot_x(
    cp_mat4_t * r,
    cp_vec2_t const* sc)
{
    cp_mat4_rot_ij(r, 1, 2, sc);
}

static inline cp_mat4_t CP_MAT4_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_x(r, sc);
    return *r;
}

#define CP_MAT4_ROT_X(sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_X_(sc) })

static inline cp_mat4i_t CP_MAT4I_ROT_X_(
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_x(r, sc);
    return *r;
}

#define CP_MAT4I_ROT_X(sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_X_(sc) })

static inline void cp_mat3_rot_y(
    cp_mat3_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_ij(r, 2, 0, sc);
}

static inline cp_mat3_t CP_MAT3_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_y(r, sc);
    return *r;
}

#define CP_MAT3_ROT_Y(sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_Y_(sc) })

static inline void cp_mat3w_rot_y(
    cp_mat3w_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_y(&r->b, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_y(r, sc);
    return *r;
}

#define CP_MAT3W_ROT_Y(sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_Y_(sc) })

static inline cp_mat3i_t CP_MAT3I_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_y(r, sc);
    return *r;
}

#define CP_MAT3I_ROT_Y(sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_Y_(sc) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_y(r, sc);
    return *r;
}

#define CP_MAT3WI_ROT_Y(sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_Y_(sc) })

static inline void cp_mat4_rot_y(
    cp_mat4_t * r,
    cp_vec2_t const* sc)
{
    cp_mat4_rot_ij(r, 2, 0, sc);
}

static inline cp_mat4_t CP_MAT4_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_y(r, sc);
    return *r;
}

#define CP_MAT4_ROT_Y(sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_Y_(sc) })

static inline cp_mat4i_t CP_MAT4I_ROT_Y_(
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_y(r, sc);
    return *r;
}

#define CP_MAT4I_ROT_Y(sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_Y_(sc) })

static inline void cp_mat2_rot(
    cp_mat2_t * r,
    cp_vec2_t const* sc)
{
    cp_mat2_rot_ij(r, 0, 1, sc);
}

static inline cp_mat2_t CP_MAT2_ROT_(
    cp_vec2_t const* sc)
{
    cp_mat2_t r[1];
    cp_mat2_rot(r, sc);
    return *r;
}

#define CP_MAT2_ROT(sc) (*(cp_mat2_t[1]){ CP_MAT2_ROT_(sc) })

static inline void cp_mat2w_rot(
    cp_mat2w_t * r,
    cp_vec2_t const* sc)
{
    cp_mat2_rot(&r->b, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat2w_t CP_MAT2W_ROT_(
    cp_vec2_t const* sc)
{
    cp_mat2w_t r[1];
    cp_mat2w_rot(r, sc);
    return *r;
}

#define CP_MAT2W_ROT(sc) (*(cp_mat2w_t[1]){ CP_MAT2W_ROT_(sc) })

static inline cp_mat2i_t CP_MAT2I_ROT_(
    cp_vec2_t const* sc)
{
    cp_mat2i_t r[1];
    cp_mat2i_rot(r, sc);
    return *r;
}

#define CP_MAT2I_ROT(sc) (*(cp_mat2i_t[1]){ CP_MAT2I_ROT_(sc) })

static inline cp_mat2wi_t CP_MAT2WI_ROT_(
    cp_vec2_t const* sc)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_rot(r, sc);
    return *r;
}

#define CP_MAT2WI_ROT(sc) (*(cp_mat2wi_t[1]){ CP_MAT2WI_ROT_(sc) })

static inline void cp_mat3_rot_z(
    cp_mat3_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_ij(r, 0, 1, sc);
}

static inline cp_mat3_t CP_MAT3_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat3_t r[1];
    cp_mat3_rot_z(r, sc);
    return *r;
}

#define CP_MAT3_ROT_Z(sc) (*(cp_mat3_t[1]){ CP_MAT3_ROT_Z_(sc) })

static inline void cp_mat3w_rot_z(
    cp_mat3w_t * r,
    cp_vec2_t const* sc)
{
    cp_mat3_rot_z(&r->b, sc);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat3w_t r[1];
    cp_mat3w_rot_z(r, sc);
    return *r;
}

#define CP_MAT3W_ROT_Z(sc) (*(cp_mat3w_t[1]){ CP_MAT3W_ROT_Z_(sc) })

static inline cp_mat3i_t CP_MAT3I_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat3i_t r[1];
    cp_mat3i_rot_z(r, sc);
    return *r;
}

#define CP_MAT3I_ROT_Z(sc) (*(cp_mat3i_t[1]){ CP_MAT3I_ROT_Z_(sc) })

static inline cp_mat3wi_t CP_MAT3WI_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_rot_z(r, sc);
    return *r;
}

#define CP_MAT3WI_ROT_Z(sc) (*(cp_mat3wi_t[1]){ CP_MAT3WI_ROT_Z_(sc) })

static inline void cp_mat4_rot_z(
    cp_mat4_t * r,
    cp_vec2_t const* sc)
{
    cp_mat4_rot_ij(r, 0, 1, sc);
}

static inline cp_mat4_t CP_MAT4_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat4_t r[1];
    cp_mat4_rot_z(r, sc);
    return *r;
}

#define CP_MAT4_ROT_Z(sc) (*(cp_mat4_t[1]){ CP_MAT4_ROT_Z_(sc) })

static inline cp_mat4i_t CP_MAT4I_ROT_Z_(
    cp_vec2_t const* sc)
{
    cp_mat4i_t r[1];
    cp_mat4i_rot_z(r, sc);
    return *r;
}

#define CP_MAT4I_ROT_Z(sc) (*(cp_mat4i_t[1]){ CP_MAT4I_ROT_Z_(sc) })

static inline void cp_mat2_mirror_unit(
    cp_mat2_t * r,
    cp_vec2_t const* u)
{
    cp_dim2_mirror_unit(&r->row[0], &r->row[1], u);
}

static inline cp_mat2_t CP_MAT2_MIRROR_UNIT_(
    cp_vec2_t const* u)
{
    cp_mat2_t r[1];
    cp_mat2_mirror_unit(r, u);
    return *r;
}

#define CP_MAT2_MIRROR_UNIT(u) (*(cp_mat2_t[1]){ CP_MAT2_MIRROR_UNIT_(u) })

static inline void cp_mat2w_mirror_unit(
    cp_mat2w_t * r,
    cp_vec2_t const* v)
{
    cp_mat2_mirror_unit(&r->b, v);
    CP_ZERO(&r->w);
}

static inline cp_mat2w_t CP_MAT2W_MIRROR_UNIT_(
    cp_vec2_t const* v)
{
    cp_mat2w_t r[1];
    cp_mat2w_mirror_unit(r, v);
    return *r;
}

#define CP_MAT2W_MIRROR_UNIT(v) (*(cp_mat2w_t[1]){ CP_MAT2W_MIRROR_UNIT_(v) })

static inline cp_mat2i_t CP_MAT2I_MIRROR_UNIT_(
    cp_vec2_t const* v)
{
    cp_mat2i_t r[1];
    cp_mat2i_mirror_unit(r, v);
    return *r;
}

#define CP_MAT2I_MIRROR_UNIT(v) (*(cp_mat2i_t[1]){ CP_MAT2I_MIRROR_UNIT_(v) })

static inline cp_mat2wi_t CP_MAT2WI_MIRROR_UNIT_(
    cp_vec2_t const* v)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_mirror_unit(r, v);
    return *r;
}

#define CP_MAT2WI_MIRROR_UNIT(v) (*(cp_mat2wi_t[1]){ CP_MAT2WI_MIRROR_UNIT_(v) })

static inline void cp_mat3_mirror_unit(
    cp_mat3_t * r,
    cp_vec3_t const* u)
{
    cp_dim3_mirror_unit(&r->row[0], &r->row[1], &r->row[2], u);
}

static inline cp_mat3_t CP_MAT3_MIRROR_UNIT_(
    cp_vec3_t const* u)
{
    cp_mat3_t r[1];
    cp_mat3_mirror_unit(r, u);
    return *r;
}

#define CP_MAT3_MIRROR_UNIT(u) (*(cp_mat3_t[1]){ CP_MAT3_MIRROR_UNIT_(u) })

static inline void cp_mat3w_mirror_unit(
    cp_mat3w_t * r,
    cp_vec3_t const* v)
{
    cp_mat3_mirror_unit(&r->b, v);
    CP_ZERO(&r->w);
}

static inline cp_mat3w_t CP_MAT3W_MIRROR_UNIT_(
    cp_vec3_t const* v)
{
    cp_mat3w_t r[1];
    cp_mat3w_mirror_unit(r, v);
    return *r;
}

#define CP_MAT3W_MIRROR_UNIT(v) (*(cp_mat3w_t[1]){ CP_MAT3W_MIRROR_UNIT_(v) })

static inline cp_mat3i_t CP_MAT3I_MIRROR_UNIT_(
    cp_vec3_t const* v)
{
    cp_mat3i_t r[1];
    cp_mat3i_mirror_unit(r, v);
    return *r;
}

#define CP_MAT3I_MIRROR_UNIT(v) (*(cp_mat3i_t[1]){ CP_MAT3I_MIRROR_UNIT_(v) })

static inline cp_mat3wi_t CP_MAT3WI_MIRROR_UNIT_(
    cp_vec3_t const* v)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_mirror_unit(r, v);
    return *r;
}

#define CP_MAT3WI_MIRROR_UNIT(v) (*(cp_mat3wi_t[1]){ CP_MAT3WI_MIRROR_UNIT_(v) })

static inline void cp_mat4_mirror_unit(
    cp_mat4_t * r,
    cp_vec3_t const* u)
{
    CP_ZERO(r);
    r->m[3][3] = 1;
    cp_dim3_mirror_unit(&r->row[0].b, &r->row[1].b, &r->row[2].b, u);
}

static inline cp_mat4_t CP_MAT4_MIRROR_UNIT_(
    cp_vec3_t const* u)
{
    cp_mat4_t r[1];
    cp_mat4_mirror_unit(r, u);
    return *r;
}

#define CP_MAT4_MIRROR_UNIT(u) (*(cp_mat4_t[1]){ CP_MAT4_MIRROR_UNIT_(u) })

static inline cp_mat4i_t CP_MAT4I_MIRROR_UNIT_(
    cp_vec3_t const* v)
{
    cp_mat4i_t r[1];
    cp_mat4i_mirror_unit(r, v);
    return *r;
}

#define CP_MAT4I_MIRROR_UNIT(v) (*(cp_mat4i_t[1]){ CP_MAT4I_MIRROR_UNIT_(v) })

static inline void cp_mat2_mirror_v(
    cp_mat2_t * r,
    cp_vec2_t const* v)
{
    cp_vec2_t u;
    cp_vec2_unit(&u, v);
    cp_mat2_mirror_unit(r, &u);
}

static inline cp_mat2_t CP_MAT2_MIRROR_V_(
    cp_vec2_t const* v)
{
    cp_mat2_t r[1];
    cp_mat2_mirror_v(r, v);
    return *r;
}

#define CP_MAT2_MIRROR_V(v) (*(cp_mat2_t[1]){ CP_MAT2_MIRROR_V_(v) })

static inline void cp_mat2w_mirror_v(
    cp_mat2w_t * r,
    cp_vec2_t const* v)
{
    cp_vec2_t u;
    cp_vec2_unit(&u, v);
    cp_mat2w_mirror_unit(r, &u);
}

static inline cp_mat2w_t CP_MAT2W_MIRROR_V_(
    cp_vec2_t const* v)
{
    cp_mat2w_t r[1];
    cp_mat2w_mirror_v(r, v);
    return *r;
}

#define CP_MAT2W_MIRROR_V(v) (*(cp_mat2w_t[1]){ CP_MAT2W_MIRROR_V_(v) })

static inline void cp_mat2i_mirror_v(
    cp_mat2i_t * r,
    cp_vec2_t const* v)
{
    cp_vec2_t u;
    cp_vec2_unit(&u, v);
    cp_mat2i_mirror_unit(r, &u);
}

static inline cp_mat2i_t CP_MAT2I_MIRROR_V_(
    cp_vec2_t const* v)
{
    cp_mat2i_t r[1];
    cp_mat2i_mirror_v(r, v);
    return *r;
}

#define CP_MAT2I_MIRROR_V(v) (*(cp_mat2i_t[1]){ CP_MAT2I_MIRROR_V_(v) })

static inline void cp_mat2wi_mirror_v(
    cp_mat2wi_t * r,
    cp_vec2_t const* v)
{
    cp_vec2_t u;
    cp_vec2_unit(&u, v);
    cp_mat2wi_mirror_unit(r, &u);
}

static inline cp_mat2wi_t CP_MAT2WI_MIRROR_V_(
    cp_vec2_t const* v)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_mirror_v(r, v);
    return *r;
}

#define CP_MAT2WI_MIRROR_V(v) (*(cp_mat2wi_t[1]){ CP_MAT2WI_MIRROR_V_(v) })

static inline void cp_mat3_mirror_v(
    cp_mat3_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3_mirror_unit(r, &u);
}

static inline cp_mat3_t CP_MAT3_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat3_t r[1];
    cp_mat3_mirror_v(r, v);
    return *r;
}

#define CP_MAT3_MIRROR_V(v) (*(cp_mat3_t[1]){ CP_MAT3_MIRROR_V_(v) })

static inline void cp_mat3w_mirror_v(
    cp_mat3w_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3w_mirror_unit(r, &u);
}

static inline cp_mat3w_t CP_MAT3W_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat3w_t r[1];
    cp_mat3w_mirror_v(r, v);
    return *r;
}

#define CP_MAT3W_MIRROR_V(v) (*(cp_mat3w_t[1]){ CP_MAT3W_MIRROR_V_(v) })

static inline void cp_mat3i_mirror_v(
    cp_mat3i_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3i_mirror_unit(r, &u);
}

static inline cp_mat3i_t CP_MAT3I_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat3i_t r[1];
    cp_mat3i_mirror_v(r, v);
    return *r;
}

#define CP_MAT3I_MIRROR_V(v) (*(cp_mat3i_t[1]){ CP_MAT3I_MIRROR_V_(v) })

static inline void cp_mat3wi_mirror_v(
    cp_mat3wi_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat3wi_mirror_unit(r, &u);
}

static inline cp_mat3wi_t CP_MAT3WI_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_mirror_v(r, v);
    return *r;
}

#define CP_MAT3WI_MIRROR_V(v) (*(cp_mat3wi_t[1]){ CP_MAT3WI_MIRROR_V_(v) })

static inline void cp_mat4_mirror_v(
    cp_mat4_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat4_mirror_unit(r, &u);
}

static inline cp_mat4_t CP_MAT4_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat4_t r[1];
    cp_mat4_mirror_v(r, v);
    return *r;
}

#define CP_MAT4_MIRROR_V(v) (*(cp_mat4_t[1]){ CP_MAT4_MIRROR_V_(v) })

static inline void cp_mat4i_mirror_v(
    cp_mat4i_t * r,
    cp_vec3_t const* v)
{
    cp_vec3_t u;
    cp_vec3_unit(&u, v);
    cp_mat4i_mirror_unit(r, &u);
}

static inline cp_mat4i_t CP_MAT4I_MIRROR_V_(
    cp_vec3_t const* v)
{
    cp_mat4i_t r[1];
    cp_mat4i_mirror_v(r, v);
    return *r;
}

#define CP_MAT4I_MIRROR_V(v) (*(cp_mat4i_t[1]){ CP_MAT4I_MIRROR_V_(v) })

static inline void cp_mat2w_xlat(
    cp_mat2w_t * r,
    double x,
    double y)
{
    cp_mat2_unit(&r->b);
    r->w = CP_VEC2(x, y);
}

static inline cp_mat2w_t CP_MAT2W_XLAT_(
    double x,
    double y)
{
    cp_mat2w_t r[1];
    cp_mat2w_xlat(r, x, y);
    return *r;
}

#define CP_MAT2W_XLAT(x, y) (*(cp_mat2w_t[1]){ CP_MAT2W_XLAT_(x, y) })

static inline void cp_mat2wi_xlat(
    cp_mat2wi_t * r,
    double x,
    double y)
{
    cp_mat2w_xlat(&r->n, x, y);
    cp_mat2w_xlat(&r->i, -x, -y);
    r->d = 1;
}

static inline cp_mat2wi_t CP_MAT2WI_XLAT_(
    double x,
    double y)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_xlat(r, x, y);
    return *r;
}

#define CP_MAT2WI_XLAT(x, y) (*(cp_mat2wi_t[1]){ CP_MAT2WI_XLAT_(x, y) })

static inline void cp_mat3_xlat(
    cp_mat3_t * r,
    double x,
    double y)
{
    cp_mat3_unit(r);
    r->m[0][2] = x;
    r->m[1][2] = y;
}

static inline cp_mat3_t CP_MAT3_XLAT_(
    double x,
    double y)
{
    cp_mat3_t r[1];
    cp_mat3_xlat(r, x, y);
    return *r;
}

#define CP_MAT3_XLAT(x, y) (*(cp_mat3_t[1]){ CP_MAT3_XLAT_(x, y) })

static inline void cp_mat3w_xlat(
    cp_mat3w_t * r,
    double x,
    double y,
    double z)
{
    cp_mat3_unit(&r->b);
    r->w = CP_VEC3(x, y, z);
}

static inline cp_mat3w_t CP_MAT3W_XLAT_(
    double x,
    double y,
    double z)
{
    cp_mat3w_t r[1];
    cp_mat3w_xlat(r, x, y, z);
    return *r;
}

#define CP_MAT3W_XLAT(x, y, z) (*(cp_mat3w_t[1]){ CP_MAT3W_XLAT_(x, y, z) })

static inline void cp_mat3i_xlat(
    cp_mat3i_t * r,
    double x,
    double y)
{
    cp_mat3_xlat(&r->n, x, y);
    cp_mat3_xlat(&r->i, -x, -y);
    r->d = 1;
}

static inline cp_mat3i_t CP_MAT3I_XLAT_(
    double x,
    double y)
{
    cp_mat3i_t r[1];
    cp_mat3i_xlat(r, x, y);
    return *r;
}

#define CP_MAT3I_XLAT(x, y) (*(cp_mat3i_t[1]){ CP_MAT3I_XLAT_(x, y) })

static inline void cp_mat3wi_xlat(
    cp_mat3wi_t * r,
    double x,
    double y,
    double z)
{
    cp_mat3w_xlat(&r->n, x, y, z);
    cp_mat3w_xlat(&r->i, -x, -y, -z);
    r->d = 1;
}

static inline cp_mat3wi_t CP_MAT3WI_XLAT_(
    double x,
    double y,
    double z)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_xlat(r, x, y, z);
    return *r;
}

#define CP_MAT3WI_XLAT(x, y, z) (*(cp_mat3wi_t[1]){ CP_MAT3WI_XLAT_(x, y, z) })

static inline void cp_mat4_xlat(
    cp_mat4_t * r,
    double x,
    double y,
    double z)
{
    cp_mat4_unit(r);
    r->m[0][3] = x;
    r->m[1][3] = y;
    r->m[2][3] = z;
}

static inline cp_mat4_t CP_MAT4_XLAT_(
    double x,
    double y,
    double z)
{
    cp_mat4_t r[1];
    cp_mat4_xlat(r, x, y, z);
    return *r;
}

#define CP_MAT4_XLAT(x, y, z) (*(cp_mat4_t[1]){ CP_MAT4_XLAT_(x, y, z) })

static inline void cp_mat4i_xlat(
    cp_mat4i_t * r,
    double x,
    double y,
    double z)
{
    cp_mat4_xlat(&r->n, x, y, z);
    cp_mat4_xlat(&r->i, -x, -y, -z);
    r->d = 1;
}

static inline cp_mat4i_t CP_MAT4I_XLAT_(
    double x,
    double y,
    double z)
{
    cp_mat4i_t r[1];
    cp_mat4i_xlat(r, x, y, z);
    return *r;
}

#define CP_MAT4I_XLAT(x, y, z) (*(cp_mat4i_t[1]){ CP_MAT4I_XLAT_(x, y, z) })

static inline void cp_mat2w_xlat_v(
    cp_mat2w_t * r,
    cp_vec2_t const* v)
{
    cp_mat2w_xlat(r, v->x, v->y);
}

static inline cp_mat2w_t CP_MAT2W_XLAT_V_(
    cp_vec2_t const* v)
{
    cp_mat2w_t r[1];
    cp_mat2w_xlat_v(r, v);
    return *r;
}

#define CP_MAT2W_XLAT_V(v) (*(cp_mat2w_t[1]){ CP_MAT2W_XLAT_V_(v) })

static inline void cp_mat2wi_xlat_v(
    cp_mat2wi_t * r,
    cp_vec2_t const* v)
{
    cp_mat2wi_xlat(r, v->x, v->y);
}

static inline cp_mat2wi_t CP_MAT2WI_XLAT_V_(
    cp_vec2_t const* v)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_xlat_v(r, v);
    return *r;
}

#define CP_MAT2WI_XLAT_V(v) (*(cp_mat2wi_t[1]){ CP_MAT2WI_XLAT_V_(v) })

static inline void cp_mat3_xlat_v(
    cp_mat3_t * r,
    cp_vec2_t const* v)
{
    cp_mat3_xlat(r, v->x, v->y);
}

static inline cp_mat3_t CP_MAT3_XLAT_V_(
    cp_vec2_t const* v)
{
    cp_mat3_t r[1];
    cp_mat3_xlat_v(r, v);
    return *r;
}

#define CP_MAT3_XLAT_V(v) (*(cp_mat3_t[1]){ CP_MAT3_XLAT_V_(v) })

static inline void cp_mat3w_xlat_v(
    cp_mat3w_t * r,
    cp_vec3_t const* v)
{
    cp_mat3w_xlat(r, v->x, v->y, v->z);
}

static inline cp_mat3w_t CP_MAT3W_XLAT_V_(
    cp_vec3_t const* v)
{
    cp_mat3w_t r[1];
    cp_mat3w_xlat_v(r, v);
    return *r;
}

#define CP_MAT3W_XLAT_V(v) (*(cp_mat3w_t[1]){ CP_MAT3W_XLAT_V_(v) })

static inline void cp_mat3i_xlat_v(
    cp_mat3i_t * r,
    cp_vec2_t const* v)
{
    cp_mat3i_xlat(r, v->x, v->y);
}

static inline cp_mat3i_t CP_MAT3I_XLAT_V_(
    cp_vec2_t const* v)
{
    cp_mat3i_t r[1];
    cp_mat3i_xlat_v(r, v);
    return *r;
}

#define CP_MAT3I_XLAT_V(v) (*(cp_mat3i_t[1]){ CP_MAT3I_XLAT_V_(v) })

static inline void cp_mat3wi_xlat_v(
    cp_mat3wi_t * r,
    cp_vec3_t const* v)
{
    cp_mat3wi_xlat(r, v->x, v->y, v->z);
}

static inline cp_mat3wi_t CP_MAT3WI_XLAT_V_(
    cp_vec3_t const* v)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_xlat_v(r, v);
    return *r;
}

#define CP_MAT3WI_XLAT_V(v) (*(cp_mat3wi_t[1]){ CP_MAT3WI_XLAT_V_(v) })

static inline void cp_mat4_xlat_v(
    cp_mat4_t * r,
    cp_vec3_t const* v)
{
    cp_mat4_xlat(r, v->x, v->y, v->z);
}

static inline cp_mat4_t CP_MAT4_XLAT_V_(
    cp_vec3_t const* v)
{
    cp_mat4_t r[1];
    cp_mat4_xlat_v(r, v);
    return *r;
}

#define CP_MAT4_XLAT_V(v) (*(cp_mat4_t[1]){ CP_MAT4_XLAT_V_(v) })

static inline void cp_mat4i_xlat_v(
    cp_mat4i_t * r,
    cp_vec3_t const* v)
{
    cp_mat4i_xlat(r, v->x, v->y, v->z);
}

static inline cp_mat4i_t CP_MAT4I_XLAT_V_(
    cp_vec3_t const* v)
{
    cp_mat4i_t r[1];
    cp_mat4i_xlat_v(r, v);
    return *r;
}

#define CP_MAT4I_XLAT_V(v) (*(cp_mat4i_t[1]){ CP_MAT4I_XLAT_V_(v) })

static inline cp_mat2_t CP_MAT2_MUL_(
    cp_mat2_t const* a,
    cp_mat2_t const* b)
{
    cp_mat2_t r[1];
    cp_mat2_mul(r, a, b);
    return *r;
}

#define CP_MAT2_MUL(a, b) (*(cp_mat2_t[1]){ CP_MAT2_MUL_(a, b) })

static inline cp_mat2w_t CP_MAT2W_MUL_(
    cp_mat2w_t const* a,
    cp_mat2w_t const* b)
{
    cp_mat2w_t r[1];
    cp_mat2w_mul(r, a, b);
    return *r;
}

#define CP_MAT2W_MUL(a, b) (*(cp_mat2w_t[1]){ CP_MAT2W_MUL_(a, b) })

static inline cp_mat2i_t CP_MAT2I_MUL_(
    cp_mat2i_t const* a,
    cp_mat2i_t const* b)
{
    cp_mat2i_t r[1];
    cp_mat2i_mul(r, a, b);
    return *r;
}

#define CP_MAT2I_MUL(a, b) (*(cp_mat2i_t[1]){ CP_MAT2I_MUL_(a, b) })

static inline cp_mat2wi_t CP_MAT2WI_MUL_(
    cp_mat2wi_t const* a,
    cp_mat2wi_t const* b)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_mul(r, a, b);
    return *r;
}

#define CP_MAT2WI_MUL(a, b) (*(cp_mat2wi_t[1]){ CP_MAT2WI_MUL_(a, b) })

static inline cp_mat3_t CP_MAT3_MUL_(
    cp_mat3_t const* a,
    cp_mat3_t const* b)
{
    cp_mat3_t r[1];
    cp_mat3_mul(r, a, b);
    return *r;
}

#define CP_MAT3_MUL(a, b) (*(cp_mat3_t[1]){ CP_MAT3_MUL_(a, b) })

static inline cp_mat3w_t CP_MAT3W_MUL_(
    cp_mat3w_t const* a,
    cp_mat3w_t const* b)
{
    cp_mat3w_t r[1];
    cp_mat3w_mul(r, a, b);
    return *r;
}

#define CP_MAT3W_MUL(a, b) (*(cp_mat3w_t[1]){ CP_MAT3W_MUL_(a, b) })

static inline cp_mat3i_t CP_MAT3I_MUL_(
    cp_mat3i_t const* a,
    cp_mat3i_t const* b)
{
    cp_mat3i_t r[1];
    cp_mat3i_mul(r, a, b);
    return *r;
}

#define CP_MAT3I_MUL(a, b) (*(cp_mat3i_t[1]){ CP_MAT3I_MUL_(a, b) })

static inline cp_mat3wi_t CP_MAT3WI_MUL_(
    cp_mat3wi_t const* a,
    cp_mat3wi_t const* b)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_mul(r, a, b);
    return *r;
}

#define CP_MAT3WI_MUL(a, b) (*(cp_mat3wi_t[1]){ CP_MAT3WI_MUL_(a, b) })

static inline cp_mat4_t CP_MAT4_MUL_(
    cp_mat4_t const* a,
    cp_mat4_t const* b)
{
    cp_mat4_t r[1];
    cp_mat4_mul(r, a, b);
    return *r;
}

#define CP_MAT4_MUL(a, b) (*(cp_mat4_t[1]){ CP_MAT4_MUL_(a, b) })

static inline cp_mat4i_t CP_MAT4I_MUL_(
    cp_mat4i_t const* a,
    cp_mat4i_t const* b)
{
    cp_mat4i_t r[1];
    cp_mat4i_mul(r, a, b);
    return *r;
}

#define CP_MAT4I_MUL(a, b) (*(cp_mat4i_t[1]){ CP_MAT4I_MUL_(a, b) })

static inline cp_mat2i_t CP_MAT2I_INV_(
    cp_mat2i_t const* a)
{
    cp_mat2i_t r[1];
    cp_mat2i_inv(r, a);
    return *r;
}

#define CP_MAT2I_INV(a) (*(cp_mat2i_t[1]){ CP_MAT2I_INV_(a) })

static inline cp_mat2wi_t CP_MAT2WI_INV_(
    cp_mat2wi_t const* a)
{
    cp_mat2wi_t r[1];
    cp_mat2wi_inv(r, a);
    return *r;
}

#define CP_MAT2WI_INV(a) (*(cp_mat2wi_t[1]){ CP_MAT2WI_INV_(a) })

static inline cp_mat3i_t CP_MAT3I_INV_(
    cp_mat3i_t const* a)
{
    cp_mat3i_t r[1];
    cp_mat3i_inv(r, a);
    return *r;
}

#define CP_MAT3I_INV(a) (*(cp_mat3i_t[1]){ CP_MAT3I_INV_(a) })

static inline cp_mat3wi_t CP_MAT3WI_INV_(
    cp_mat3wi_t const* a)
{
    cp_mat3wi_t r[1];
    cp_mat3wi_inv(r, a);
    return *r;
}

#define CP_MAT3WI_INV(a) (*(cp_mat3wi_t[1]){ CP_MAT3WI_INV_(a) })

static inline cp_mat4i_t CP_MAT4I_INV_(
    cp_mat4i_t const* a)
{
    cp_mat4i_t r[1];
    cp_mat4i_inv(r, a);
    return *r;
}

#define CP_MAT4I_INV(a) (*(cp_mat4i_t[1]){ CP_MAT4I_INV_(a) })

static inline double cp_mat2i_det(
    cp_mat2i_t const* a)
{
    return a->d;
}

static inline double cp_mat2wi_det(
    cp_mat2wi_t const* a)
{
    return a->d;
}

static inline double cp_mat3i_det(
    cp_mat3i_t const* a)
{
    return a->d;
}

static inline double cp_mat3wi_det(
    cp_mat3wi_t const* a)
{
    return a->d;
}

static inline double cp_mat4i_det(
    cp_mat4i_t const* a)
{
    return a->d;
}

#endif /* CP_MAT_GEN_INL_H_ */
